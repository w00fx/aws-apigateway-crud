'use strict';

// tests for readNotes
// Generated by serverless-mocha-plugin

const dynamodb_response = {
  Items: [
    {
      note_name: 'teste',
      note_description: 'This is a created note via Mocha testing'
    }
  ],
  Count: 1,
  ScannedCount: 1
};


const mochaPlugin = require('serverless-mocha-plugin');
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('readNotes', '/lambdas/readNotes.js', 'handler');

const AWS = require("aws-sdk");
const AWS_SDK_MOCK = require("aws-sdk-mock");

describe('readNotes tests', () => {
  before((done) => {
    AWS_SDK_MOCK.setSDKInstance(AWS);
    AWS_SDK_MOCK.mock("DynamoDB.DocumentClient", "scan", function (params, callback) {
      callback(null, dynamodb_response);
    });
    done();
  });
  after((done) => {
    AWS_SDK_MOCK.restore("DynamoDB");
    done();
  });

  it('Scan table', async () => {
    const response = await wrapped.run({});
    expect(response).to.have.property("statusCode").equal(200);
    expect(response).to.have.property("body").equal(JSON.stringify(
      {
        notes: dynamodb_response.Items,
        message: 'Items retrieved.'
      }));
  });

  it('Force error', async () => {
    AWS_SDK_MOCK.remock("DynamoDB.DocumentClient", "scan", function (params, callback) {
      callback('ANY_ERROR', null);
    });
    const response = await wrapped.run({});
    expect(response).to.have.property("statusCode").equal(500);
  });
});
