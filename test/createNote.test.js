"use strict";

// tests for createNote
// Generated by serverless-mocha-plugin
const event = {
  version: "2.0",
  routeKey: "POST /",
  rawPath: "/",
  rawQueryString: "",
  headers: {
    accept: "*/*",
    "accept-encoding": "gzip, deflate, br",
    "content-length": "94",
    "content-type": "application/json",
    host: "API_DOMAIN",
    "postman-token": "f7b4b3ca-46a9-44c6-ba1f-e00b0e650c05",
    "user-agent": "PostmanRuntime/7.29.2",
    "x-amzn-trace-id": "Root=1-639a7406-2e750500257e857332612ed6",
    "x-forwarded-for": "IP",
    "x-forwarded-port": "443",
    "x-forwarded-proto": "https",
  },
  requestContext: {
    accountId: 'ID',
    apiId: 'API_ID',
    domainName: 'API_DOMAIN',
    domainPrefix: 'DOMAIN_PREFIX',
    http: {
      method: "POST",
      path: "/",
      protocol: "HTTP/1.1",
      sourceIp: "IP",
      userAgent: "PostmanRuntime/7.29.2",
    },
    requestId: "dKcRFjzxoAMEVhA=",
    routeKey: "POST /",
    stage: "$default",
    time: "15/Dec/2022:01:10:30 +0000",
    timeEpoch: 1671066630769,
  },
  body: '{\n    "note_name": "Teste",\n    "note_description": "This is a created note via API Gateway"\n}',
  isBase64Encoded: false,
};

const mochaPlugin = require("serverless-mocha-plugin");
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper(
  "createNote",
  "/lambdas/createNote.js",
  "handler"
);
const AWS = require("aws-sdk");
const AWS_SDK_MOCK = require("aws-sdk-mock");



describe("createNote tests", () => {
  before((done) => {
    AWS_SDK_MOCK.setSDKInstance(AWS);
    AWS_SDK_MOCK.mock("DynamoDB.DocumentClient", "put", function (params, callback) {
      if (params.Item.note_name === 'exception_test') {
        callback({name: 'ConditionalCheckFailedException'}, null);
      } else if (params.Item.note_name === 'another_error') {
        callback({name: "ANY_ERROR"}, {});
      } else {
        callback(null, {});
      };
    });
    done();
  });
  after((done) => {
    AWS_SDK_MOCK.restore("DynamoDB");
    done();
  });

  it("normal create test", async () => {
    const response = await wrapped.run(event);
    expect(response).to.have.property("statusCode").equal(201);
  });

  it("Dynamodb conditional exception test", async () => {
    event.body = '{\n    "note_name": "exception_test",\n    "note_description": "Testing description."\n}'
    const response = await wrapped.run(event);
    expect(response).to.have.property("statusCode").equal(409);
  });

  it("Dynamodb not treated error", async () => {
    event.body = '{\n    "note_name": "another_error",\n    "note_description": "Testing description."\n}'
    const response = await wrapped.run(event);
    expect(response).to.have.property("statusCode").equal(500);
  });

  it("Invalid JSON format", async () => {
    event.body = 'invalid json';
    const response = await wrapped.run(event);
    expect(response).to.have.property("statusCode").equal(400);
  });

  it("Missing necessary fields", async () => {
    event.body = '{\n    "invalid_field": "test"\n    }';
    const response = await wrapped.run(event);
    expect(response).to.have.property("statusCode").equal(400);
  });

  it("Fields must be strings", async () => {
    event.body = '{\n    "note_name": "exception_test",\n    "note_description": 1234\n}';
    const response = await wrapped.run(event);
    expect(response).to.have.property("statusCode").equal(400);
  });
});
