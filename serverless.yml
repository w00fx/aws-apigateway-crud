service: aws-apigateway-crud
frameworkVersion: '3'

plugins:
  - serverless-iam-roles-per-function
  - serverless-mocha-plugin
  - serverless-export-outputs
  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies

custom:
  exportOutputs:
    - HttpApiUrl

provider:
  name: aws
  runtime: nodejs16.x
  architecture: arm64
  memorySize: 256
  timeout: 29
  tracing:
    lambda: true

package:
  individually: true
  patterns:
    - '!.github/**'
    - '!images/**'
    - '!lambdas/**'
    - '!scripts/**'
    - '!integration_tests/**'

functions:
  createNote:
    handler: lambdas/createNote.handler
    environment:
      TABLE_NAME: !Ref notesTable
    package:
      patterns: 
       - 'lambdas/createNote.js'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
    events:
      - httpApi:
          path: /
          method: POST

  readNotes:
    handler: lambdas/readNotes.handler
    environment:
      TABLE_NAME: !Ref notesTable
    package:
      patterns: 
       - 'lambdas/readNotes.js'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt notesTable.Arn
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
    events:
      - httpApi:
          path: /
          method: GET

  deleteNote:
    handler: lambdas/deleteNote.handler
    environment:
      TABLE_NAME: !Ref notesTable
    package:
      patterns: 
       - 'lambdas/deleteNote.js'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
    events:
      - httpApi:
          path: /{note_name}
          method: DELETE

  updateNote:
    handler: lambdas/updateNote.handler
    environment:
      TABLE_NAME: !Ref notesTable
    package:
      patterns: 
       - 'lambdas/updateNote.js'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
    events:
      - httpApi:
          path: /
          method: PUT

resources:
  Resources:
    notesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: note_name
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: note_name
            KeyType: HASH
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        # TableName: ${self:service}-notesTable-${sls:stage}
